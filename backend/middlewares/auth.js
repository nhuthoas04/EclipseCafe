const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  let token;

  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      // Get token from header
      token = req.headers.authorization.split(' ')[1];
      
      if (!token || token === 'undefined' || token === 'null') {
        return res.status(401).json({ 
          success: false,
          message: 'Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p',
          tokenExpired: false
        });
      }

      // Verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // Get user from token with timeout
      req.user = await User.findById(decoded.id)
        .select('-password')
        .maxTimeMS(15000);

      if (!req.user) {
        return res.status(401).json({ 
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
          tokenExpired: false
        });
      }

      // ƒê·∫£m b·∫£o req.user c√≥ id
      req.user.id = req.user._id.toString();

      next();
    } catch (error) {
      console.error('üö´ JWT Error:', error.message);
      
      let message = 'Token kh√¥ng h·ª£p l·ªá';
      let tokenExpired = false;
      
      if (error.name === 'TokenExpiredError') {
        message = 'Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i';
        tokenExpired = true;
      } else if (error.name === 'JsonWebTokenError') {
        message = 'Token kh√¥ng h·ª£p l·ªá';
      }
      
      return res.status(401).json({ 
        success: false,
        message: message,
        tokenExpired: tokenExpired
      });
    }
  } else {
    return res.status(401).json({ 
      success: false,
      message: 'Kh√¥ng c√≥ token, truy c·∫≠p b·ªã t·ª´ ch·ªëi',
      tokenExpired: false
    });
  }
};

// Admin middleware
const admin = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    res.status(401).json({ 
      success: false,
      message: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn truy c·∫≠p' 
    });
  }
};

// Optional protect - cho ph√©p truy c·∫≠p v·ªõi ho·∫∑c kh√¥ng c√≥ token
const optionalProtect = async (req, res, next) => {
  let token;

  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      // Get token from header
      token = req.headers.authorization.split(' ')[1];
      
      if (token && token !== 'undefined' && token !== 'null') {
        // Verify token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // Get user from token with timeout
        req.user = await User.findById(decoded.id)
          .select('-password')
          .maxTimeMS(15000);

        if (req.user) {
          // ƒê·∫£m b·∫£o req.user c√≥ id
          req.user.id = req.user._id.toString();
        }
      }
    } catch (error) {
      console.log('Token kh√¥ng h·ª£p l·ªá, ti·∫øp t·ª•c nh∆∞ guest');
      // Kh√¥ng return error, ch·ªâ log v√† ti·∫øp t·ª•c
    }
  }

  next();
};

module.exports = { protect, admin, optionalProtect };
